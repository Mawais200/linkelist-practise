class SinglyLinkedList {

    // Node definition
    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    private Node head; // start of the list

    // 1. Add node at start
    public void addAtStart(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // 2. Add node at specific index (0-based index)
    public void addAtIndex(int index, int data) {
        if (index < 0) {
            System.out.println("Invalid index.");
            return;
        }

        if (index == 0) {
            addAtStart(data);
            return;
        }

        Node current = head;
        for (int i = 0; i < index - 1; i++) {
            if (current == null) {
                System.out.println("Index out of bounds.");
                return;
            }
            current = current.next;
        }

        Node newNode = new Node(data);
        newNode.next = current.next;
        current.next = newNode;
    }

    // 3. Add node at the end
    public void addAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }

        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
    }

    // 4. Remove head node
    public void removeHead() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }
        head = head.next;
    }

    // 5. Remove specific node at index
    public void removeAtIndex(int index) {
        if (head == null || index < 0) {
            System.out.println("Invalid operation.");
            return;
        }

        if (index == 0) {
            removeHead();
            return;
        }

        Node current = head;
        for (int i = 0; i < index - 1; i++) {
            if (current.next == null) {
                System.out.println("Index out of bounds.");
                return;
            }
            current = current.next;
        }

        if (current.next == null) {
            System.out.println("Index out of bounds.");
            return;
        }

        current.next = current.next.next;
    }

    // 6. Remove last node
    public void removeLast() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        if (head.next == null) {
            head = null;
            return;
        }

        Node current = head;
        while (current.next.next != null) {
            current = current.next;
        }
        current.next = null;
    }

    // 7. Find a node with specific data
    public Node find(int data) {
        Node current = head;
        while (current != null) {
            if (current.data == data) {
                return current;
            }
            current = current.next;
        }
        return null; // not found
    }

    // 8. Get value at index
    public int get(int index) {
        Node current = head;
        int count = 0;
        while (current != null) {
            if (count == index) {
                return current.data;
            }
            count++;
            current = current.next;
        }
        throw new IndexOutOfBoundsException("Index out of range");
    }

    // 9. Start - display all elements
    public void displayList() {
        Node current = head;
        if (current == null) {
            System.out.println("List is empty.");
            return;
        }

        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }

    // Main function to test
    public static void main(String[] args) {
        SinglyLinkedList list = new SinglyLinkedList();

        list.addAtEnd(10);
        list.addAtEnd(20);
        list.addAtStart(5);
        list.addAtIndex(1, 15);
        list.displayList();

        list.removeHead();
        list.displayList();

        list.removeAtIndex(1);
        list.displayList();

        list.removeLast();
        list.displayList();

        Node found = list.find(15);
        System.out.println("Found: " + (found != null ? found.data : "Not found"));

        try {
            System.out.println("Element at index 1: " + list.get(1));
        } catch (IndexOutOfBoundsException e) {
            System.out.println(e.getMessage());
        }

        list.displayList();
    }
}
